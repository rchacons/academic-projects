Pourquoi l'exemple N1Select est plus lent ?

Réponse :
Lors de la requête, les entités "Department" sont récupérées de la base de données de manière "lazy", ce qui signifie
que les données ne sont chargées que lorsqu'elles sont accédées. Ainsi, lorsque nous appelons d.getEmployees(), cela
entraîne l'exécution d'une requête séparée pour récupérer les employés de ce département, ce qui est connu sous le nom
de "lazy load".

Le lazy loading permet de charger les entités associées à partir de la base de données sur demande, et il peut être utile
dans les scénarios où on a besoin d'accéder à une petite partie des entités associées, car cela peut réduire la quantité
de données chargées à partir de la base de données et réduire donc l'utilisation de la mémoire.

Le problème ici est qu'il entraîne de nombreux allers-retours supplémentaires à la base de données, ce qui augmente le temps
de réponse de l'application.

 ************************************************************************************************8

 Why the JoinFetch example is faster ?

Réponse :

Lors de la requête, les entités "Department" et leurs entités "Employees" sont récupérées de la base de données de manière
"eager", ce qui signifie que toutes les données sont chargées en une seule fois dans une seule requête. Cela est dû à l'utilisation
du 'join fetch', car nous indiquons au moteur JPA de charger les entités associées dans la même requête.

Ainsi, lorsque nous appelons d.getEmployees(), il ne résulte pas d'une requête séparée car les données sont déjà chargées.

Il est plus rapide que la classe N1Select car nous ne faisons qu'une seule requête au lieu de deux, et toutes les données sont
 chargées en un seul aller-retour à la base de données.